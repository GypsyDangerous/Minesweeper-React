{"version":3,"sources":["contexts/gameContext.js","components/Tile.js","components/GameBoard.js","components/Header.js","App.js","index.js"],"names":["gameContext","createContext","flagCount","setFlagCount","gameIsOver","setGameIsOver","Index","i","j","n","twoDInex","cols","Math","floor","Tile","props","useState","tile","setTile","board","setBoard","hover","setHover","game","useContext","useEffect","t","boardSize","boardDimension","extraClick","reduce","acc","cur","isFlag","setWinner","hasBomb","onContextMenu","e","copy","index","isClicked","onClick","reveal","force","current","forEach","x","y","k","neighbors","neighbor","onMouseOver","buttons","onMouseLeave","className","style","width","height","icon","faBomb","color","faFlag","GameBoard","size","styleObj","gridTemplateColumns","dimension","map","key","Header","useStopwatch","autoStart","seconds","minutes","pause","start","reset","emoji","setEmoji","mouseDown","setMouseDown","winner","mineCount","text","App","Array","fill","difficulty","boardArray","keys","sort","random","slice","preventDefault","onMouseUp","onMouseDown","ReactDOM","render","setGameisOver","Provider","value","setMineCount","children","document","getElementById"],"mappings":"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","file":"static/js/main.747b4e05.chunk.js","sourcesContent":["import React, {createContext, useState} from \"react\"\r\n\r\nexport const gameContext = createContext({\r\n    flagCount: 0,\r\n    setFlagCount: () => {},\r\n    gameIsOver: false,\r\n    setGameIsOver: () => {}\r\n})\r\n\r\nexport const GameContextProvider = props => {\r\n    const [flagCount, setFlagCount] = useState(0)\r\n    const [gameIsOver, setGameisOver] = useState(false)\r\n    const [winner, setWinner] = useState(false)\r\n    const [mineCount, setMineCount] = useState(10)\r\n\r\n    return (\r\n        <gameContext.Provider\r\n            value={{\r\n                flagCount: flagCount,\r\n                setFlagCount: setFlagCount,\r\n                gameIsOver: gameIsOver,\r\n                setGameIsOver: setGameisOver,\r\n                winner: winner,\r\n                setWinner: setWinner,\r\n                mineCount: mineCount,\r\n                setMineCount: mineCount\r\n            }}\r\n        >\r\n            {props.children}\r\n        </gameContext.Provider>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\r\nimport {faBomb, faFlag} from \"@fortawesome/free-solid-svg-icons\"\r\nimport { gameContext } from '../contexts/gameContext';\r\n\r\nconst Index = (i, j, n = 3) => {\r\n    if(i < 0 || j < 0 || i >= n || j >= n)return\r\n    return n * i + j\r\n}\r\n\r\nconst twoDInex = (n, cols) => {\r\n    const i = n%cols\r\n    const j = Math.floor(n/cols)\r\n    return [j, i]\r\n} \r\n\r\nconst Tile = props => {\r\n\r\n    const [tile, setTile] = useState({})\r\n    const [board, setBoard] = props.board\r\n    const [hover, setHover] = useState(false)\r\n    const game = useContext(gameContext)\r\n\r\n    useEffect(() => {\r\n        setTile(t => props.tile || t)\r\n    }, [props])\r\n\r\n    const {boardSize, boardDimension} = props\r\n\r\n    const reveal = (index, force=false) => {\r\n        const copy = [...board]\r\n        const current = copy[index]\r\n        if(!current.isClicked && (!current.isFlag || force)){\r\n            copy[index].isClicked = true\r\n            if(copy[index].hasBomb){\r\n                game.setGameIsOver(true)\r\n                copy.forEach((t, i) => reveal(i, true))\r\n            }\r\n            const [x, y] = twoDInex(index, boardDimension)\r\n            \r\n            if (!copy[index].hasBomb) {\r\n                for (let i = -1; i < 2; i++) {\r\n                    for (let j = -1; j < 2; j++) {\r\n                        const k = Index(i + x, j + y, boardDimension)\r\n                        if (copy[k]) {\r\n                            copy[index].neighbors += copy[k].hasBomb ? 1 : 0\r\n                        }\r\n                    }\r\n                }\r\n                if(copy[index].neighbors <= 0){\r\n                    for (let i = -1; i < 2; i++) {\r\n                        for (let j = -1; j < 2; j++) {\r\n                            const k = Index(i + x, j + y, boardDimension)\r\n                            const neighbor = copy[k]\r\n                            if(neighbor && !neighbor.hasBomb && k !== index){\r\n                                reveal(k)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            setBoard(copy)\r\n        }\r\n    }\r\n\r\n    const extraClick = () => {\r\n        game.setFlagCount(board.reduce((acc, cur, i) => cur.isFlag ? acc + 1 : acc, 0))\r\n        game.setWinner(board.reduce((acc, cur) => cur.isFlag && cur.hasBomb ? acc + 1 : acc, 0) === board.reduce((acc, cur) => cur.hasBomb ? acc + 1 : acc, 0))\r\n    }\r\n\r\n    const clickHandler = e => {\r\n        reveal(props.index)\r\n        extraClick()\r\n    }\r\n\r\n    const contextHandler = e => {\r\n        const copy = [...board]\r\n        if (!copy[props.index].isClicked) {\r\n            copy[props.index].isFlag = !copy[props.index].isFlag\r\n            setBoard(copy)\r\n        }\r\n        extraClick()\r\n    }\r\n\r\n    const handleMouseOver = e => {\r\n        if(e.buttons === 1 || e.buttons === 2){\r\n            setHover(true)\r\n        }   \r\n    }\r\n\r\n    return (\r\n        <button onContextMenu={contextHandler} onClick={clickHandler} onMouseOver={handleMouseOver} onMouseLeave={() => setHover(false)} className={`tile ${tile.isClicked && \"inset\"} ${!tile.isClicked && hover && \"no-bomb inset\"} ${tile.isClicked && !tile.hasBomb && \"no-bomb\"}`} style={{width: boardSize/boardDimension, height: boardSize/boardDimension}}>\r\n            {tile.isClicked && tile.hasBomb && <FontAwesomeIcon icon={faBomb}/>}\r\n            {(!tile.isClicked || tile.hasBomb) && tile.isFlag && <FontAwesomeIcon style={{color: \"red\"}} icon={faFlag}/>}\r\n            {tile.isClicked && !tile.hasBomb && tile.neighbors > 0 ? tile.neighbors : \"\"}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Tile;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Tile from './Tile';\r\n\r\nimport \"./GameBoard.css\"\r\n\r\nconst GameBoard = props => {\r\n\r\n    const [board, setBoard] = useState([])\r\n    const [size, setSize] = useState(700)\r\n\r\n    useEffect(() => {\r\n        setBoard(props.board)\r\n    }, [props])\r\n\r\n    const styleObj = {\r\n        gridTemplateColumns: `repeat(${props.dimension}, 1fr)`\r\n    }\r\n\r\n    return (\r\n        <div className=\"game-board\" style={styleObj}>\r\n            {board.map((t, i) => (\r\n                <Tile key={i} index={i} tile={t} board={[board, setBoard]} boardDimension={props.dimension} boardSize={size} />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameBoard;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport Emoji, { Twemoji, Emojione} from \"react-emoji-render\"\r\nimport { gameContext } from '../contexts/gameContext';\r\nimport { useStopwatch } from \"react-timer-hook\"\r\n\r\n\r\nconst winnerFace = \"😎\"\r\n\r\nconst Header = props => {\r\n\r\n    const {\r\n        seconds,\r\n        minutes,\r\n        start,\r\n        pause,\r\n        reset,\r\n    } = useStopwatch({ autoStart: true });\r\n\r\n    const [emoji, setEmoji] = useState(\":)\")\r\n    const [mouseDown, setMouseDown] = useState(false)\r\n\r\n    const game = useContext(gameContext)\r\n\r\n    useEffect(() => {\r\n        setMouseDown(props.mouseDown)\r\n    }, [props])\r\n\r\n    useEffect(() => {\r\n        setEmoji(game.winner ? winnerFace : game.gameIsOver ? \"☠️\" : mouseDown ? \":o\" : \":)\")\r\n    }, [mouseDown, game])\r\n\r\n    useEffect(() => {\r\n        if(game.gameIsOver || game.winner){\r\n            pause()\r\n        }\r\n    }, [game])\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"header__text\">0{game.mineCount-game.flagCount}</div>\r\n            <button onClick={() => {props.onClick(); reset()}} className=\"header__button\"><Emoji className=\"emoji\" text={emoji}/></button>\r\n            <div className=\"header__text\">{minutes < 10 && \"0\"}{minutes}:{seconds < 10 && \"0\"}{seconds}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React, {useState, useEffect, useContext} from 'react';\nimport './App.css';\nimport GameBoard from './components/GameBoard';\nimport Tile from './components/Tile';\nimport { gameContext } from './contexts/gameContext';\nimport Header from './components/Header';\n\nconst map = (n, start1, stop1, start2, stop2) => {\n  return ((n - start1) / (stop1 - start1)) * (stop2 - start2) + start2;\n};\n\n\nfunction App() {\n\n  const [dimension, setDimension] = useState(15);\n  const [board, setBoard] = useState(Array(dimension * dimension).fill())\n  const [difficulty, setDifficulty] = useState(1)\n  const [mouseDown, setMouseDown] = useState(false)\n\n  const game = useContext(gameContext)\n\n  const reset = () => {\n\n    let boardArray = Array(dimension * dimension).fill().map(() => {\n      return {\n        hasBomb: false,\n        isClicked: false,\n        neighbors: 0,\n        isFlag: false\n      }\n    })\n    const indexes = [...Array(dimension * dimension).keys()].sort(() => Math.random()-.5).slice(0, game.mineCount)\n    indexes.forEach(index => boardArray[index].hasBomb = true)\n    setBoard(boardArray)\n    game.setFlagCount(0)\n    game.setGameIsOver(false)\n    game.setWinner(false)\n  }\n\n  useEffect(() => {\n    reset()\n  }, [dimension, difficulty])\n\n  return (\n      <div className=\"App\" onContextMenu={e => e.preventDefault()} onMouseUp={() => setMouseDown(false)} onMouseDown={() => setMouseDown(true)}>\n        <Header mouseDown={mouseDown} onClick={reset}/>\n        <GameBoard board={board} dimension={dimension}/>\n      </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { GameContextProvider } from './contexts/gameContext';\n\nReactDOM.render(<GameContextProvider><App /></GameContextProvider>, document.getElementById('root'));"],"sourceRoot":""}